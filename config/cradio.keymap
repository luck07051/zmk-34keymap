// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Layer name
#define DEF 0
#define NUM 1
#define NAV 2
#define FUN 3

#define OSU 4
#define OMN 5

// Home row mods macro
#define LHRM(k1,k2,k3,k4) &mt LGUI k1  &mt LCTRL k2  &mt LALT k3  &mt LSHFT k4
#define RHRM(k1,k2,k3,k4) &mt RSHFT k1  &mt RALT k2  &mt RCTRL k3  &mt RGUI k4

// Hold tap symbols
#define TLR(k1,k2,k3,k4,k5) &kp       k1   &ht LBRC  k2   &ht RBRC k3   &ht HASH  k4   &ht QMARK k5
#define HLR(k1,k2,k3,k4,k5) LHRM(     k1,            k2,           k3,            k4)  &ht EXCL  k5
#define BLR(k1,k2,k3,k4,k5) &ht BSLH  k1   &ht LT    k2   &ht GT   k3   &ht PRCNT k4   &kp       k5

#define TRR(k1,k2,k3,k4,k5) &ht CARET k1   &ht DLLR  k2   &ht LBKT k3   &ht RBKT  k4   &kp       k5
#define HRR(k1,k2,k3,k4,k5) &ht PIPE  k1   RHRM(     k2,           k3,            k4,            k5)
#define BRR(k1,k2,k3,k4,k5) &kp       k1   &ht AMPS  k2   &ht LPAR k3   &ht RPAR  k4   &ht FSLH  k5

// Bluetooth shorthand for alignments
#define BTSEL(index) &bt BT_SEL index
#define BTCLR        &bt BT_CLR
#define OUTUSB       &out OUT_USB
#define OUTBLE       &out OUT_BLE

// Combo macro for shorthand
#define COMBO(name, keycode, pos, layer, time) name { \
        bindings = <keycode>; \
        key-positions = <pos>; \
        layers = <layer>; \
        timeout-ms = <time>; \
    };

// Pair hold tap behavior macro for shorthand
#define PAIR_HT(name, label_name, macros_name) name: name { \
            compatible = "zmk,behavior-hold-tap"; \
            label = label_name; \
            #binding-cells = <2>; \
            flavor = "tap-preferred"; \
            tapping-term-ms = <200>; \
            bindings = <&macros_name>, <&kp>; \
        };

&lt {
    flavor = "tap-preferred";
    tapping-term-ms = <220>;
};

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BACKSPACE>;
};

/ {
    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <170>;
            bindings = <&kp>, <&kp>;
        };

        PAIR_HT(par_ht, "par_ht", par_pair)
        PAIR_HT(brc_ht, "brc_ht", brc_pair)
        PAIR_HT(bkt_ht, "bkt_ht", bkt_pair)
        PAIR_HT(lgt_ht, "lgt_ht", lgt_pair)
        PAIR_HT(sqt_ht, "sqt_ht", sqt_pair)
        PAIR_HT(dqt_ht, "dqt_ht", dqt_pair)

    };

    macros {
        ZMK_MACRO(par_pair, wait-ms = <0>; tap-ms = <0>; bindings = <&kp LPAR &kp RPAR &kp LARW>;)
        ZMK_MACRO(brc_pair, wait-ms = <0>; tap-ms = <0>; bindings = <&kp LBRC &kp RBRC &kp LARW>;)
        ZMK_MACRO(bkt_pair, wait-ms = <0>; tap-ms = <0>; bindings = <&kp LBKT &kp RBKT &kp LARW>;)
        ZMK_MACRO(lgt_pair, wait-ms = <0>; tap-ms = <0>; bindings = <&kp LT   &kp GT   &kp LARW>;)
        ZMK_MACRO(sqt_pair, wait-ms = <0>; tap-ms = <0>; bindings = <&kp SQT  &kp SQT  &kp LARW>;)
        ZMK_MACRO(dqt_pair, wait-ms = <0>; tap-ms = <0>; bindings = <&kp DQT  &kp DQT  &kp LARW>;)
    };

    combos {
        compatible = "zmk,combos";

        // Top row combos: Q TAB @ #   ; : * ^
        COMBO(kpq,            &brc_ht Q Q,           1  2,      DEF NUM,  50)
        COMBO(tab,            &kp TAB,                  2  3,   DEF NUM,  50)
        COMBO(at_sign,        &kp AT_SIGN,           1     3,   DEF NUM,  50)
        COMBO(hash,           &kp HASH,              1  2  3,   DEF NUM,  50)

        COMBO(semicolon,      &kp SEMICOLON,         6  7,      DEF NUM,  50)
        COMBO(colon,          &bkt_ht COLON COLON,      7  8,   DEF NUM,  50)
        COMBO(asterisk,       &kp ASTERISK,          6     8,   DEF NUM,  50)
        COMBO(caret,          &kp CARET,             6  7  8,   DEF NUM,  50)

        // Home row combos: ' ESC TAB $   BS " + =
        COMBO(single_quote,   &sqt_ht SQT SQT,       11 12,     DEF NUM,  50)
        COMBO(escape,         &kp ESCAPE,               12 13,  DEF NUM,  50)
        COMBO(caps_word,      &caps_word,            11    13,  DEF NUM,  50)
        COMBO(dollar,         &kp DOLLAR,            11 12 13,  DEF NUM,  50)

        COMBO(backspace,      &kp BACKSPACE,         16 17,     DEF NUM,  50)
        COMBO(double_quotes,  &dqt_ht DQT DQT,          17 18,  DEF NUM,  50)
        COMBO(plus,           &kp PLUS,              16    18,  DEF NUM,  50)
        COMBO(equal,          &kp EQUAL,             16 17 18,  DEF NUM,  50)
        COMBO(delete,         &kp DELETE,            15 16,     DEF NUM,  50)

        // Bottom row combos: Z / ? !   ( ) & |
        COMBO(kpz,            &lgt_ht Z Z,           21 22,     DEF NUM,  50)
        COMBO(slash,          &kp FSLH,                 22 23,  DEF NUM,  50)
        COMBO(question,       &kp QUESTION,          21    23,  DEF NUM,  50)
        COMBO(exclamation,    &kp EXCLAMATION,       21 22 23,  DEF NUM,  50)

        COMBO(lpar,           &kp LPAR,              26 27,     DEF NUM,  50)
        COMBO(rpar,           &par_ht RPAR RPAR,        27 28,  DEF NUM,  50)
        COMBO(ampersand,      &kp AMPERSAND,         26    28,  DEF NUM,  50)
        COMBO(pipe,           &kp PIPE,              26 27 28,  DEF NUM,  50)

        // Other one hand combos: { }   < >     [ ]   ~ \\
        COMBO(left_brace,     &kp LEFT_BRACE,        11 2,      DEF NUM,  50)
        COMBO(right_brace,    &kp RIGHT_BRACE,          2  13,  DEF NUM,  50)
        COMBO(less_than,      &kp LESS_THAN,         21 12,     DEF NUM,  50)
        COMBO(greater_than,   &kp GREATER_THAN,         12 23,  DEF NUM,  50)

        COMBO(left_bracket,   &kp LEFT_BRACKET,      16 7,      DEF NUM,  50)
        COMBO(right_bracket,  &kp RIGHT_BRACKET,        7  18,  DEF NUM,  50)
        COMBO(tilde,          &kp TILDE,             26 17,     DEF NUM,  50)
        COMBO(backslash,      &kp BACKSLASH,            17 28,  DEF NUM,  50)


        // Vertical combos for number
        COMBO(num1,           &kp N1,                6  16,     DEF NUM,  50)
        COMBO(num2,           &kp N2,                7  17,     DEF NUM,  50)
        COMBO(num3,           &kp N3,                8  18,     DEF NUM,  50)
        COMBO(num4,           &kp N4,                17 27,     DEF NUM,  50)
        COMBO(num5,           &kp N5,                16 26,     DEF NUM,  50)
        COMBO(num6,           &kp N6,                13 23,     DEF NUM,  50)
        COMBO(num7,           &kp N7,                12 22,     DEF NUM,  50)
        COMBO(num8,           &kp N8,                1  11,     DEF NUM,  50)
        COMBO(num9,           &kp N9,                2  12,     DEF NUM,  50)
        COMBO(num0,           &kp N0,                3  13,     DEF NUM,  50)

        COMBO(osu2defualt,    &to DEF,               0 1 2 3,  OSU OMN,  50)
        COMBO(osu2mania,      &tog OMN,              6 7 8 9,  OSU OMN,  50)
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        sym_layer {
            if-layers = <NUM NAV>;
            then-layer = <FUN>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
            TLR(Q,     W,         F,         P,         B)             TRR(J,     L,         U,         Y,         COLON)
            HLR(A,     R,         S,         T,         G)             HRR(M,     N,         E,         I,         O)
            BLR(UNDER, X,         C,         D,         V)             BRR(K,     H,         COMMA,     DOT,       MINUS)
                                      &key_repeat  &lt NAV SPACE       &lt NUM ENTER  &trans
            >;
        };

        number_layer {
            bindings = <
            TLR(Q,     FSLH,      ASTRK,     EQUAL,     B)             TRR(J,     PLUS,      MINUS,     CARET,     COLON)
            HLR(N7,    N8,        N9,        N0,        PRCNT)         HRR(EXCL,  N1,        N2,        N3,        N4)
            BLR(UNDER, X,         LS(G),     N6,        DLLR)          BRR(K,     N5,        COMMA,     DOT,       MINUS)
                                             &trans     &trans         &trans     &sl FUN
            >;
        };

        navigation_layer {
            bindings = <
            &trans     &kp LC(LS(L)) &kp LC(LS(TAB)) &kp LC(TAB) &trans        &trans     &trans     &trans     &trans     &trans
            &sk LGUI   &sk LCTRL  &sk LALT   &sk LSHFT  &trans         &kp LARW   &kp DARW   &kp UARW   &kp RARW   &trans
            &kp LC(A)  &kp K_CUT  &kp K_COPY &kp K_PASTE &trans         &kp HOME   &kp PG_DN  &kp PG_UP  &kp END    &trans
                                             &trans     &trans         &trans     &trans
            >;
        };

        function_layer {
            bindings = <
            &trans     &trans     OUTBLE     OUTUSB     BTCLR          BTSEL(0)   BTSEL(1)   BTSEL(2)   BTSEL(3)   BTSEL(4)
            &kp F7     &kp F8     &kp F9     &kp F10    &kp F12        &kp F11    &kp F1     &kp F2     &kp F3     &kp F4
            &to OSU    &trans     &trans     &kp F6     &trans         &trans     &kp F5     &trans     &trans     &trans
                                             &trans     &trans         &trans     &trans
            >;
        };

        osu_layer {
            bindings = <
            &kp Q      &kp W      &kp E      &kp R      &kp T          &kp Y      &kp U      &kp I      &kp O      &kp P
            &kp A      &kp S      &kp D      &kp F      &kp G          &kp H      &kp J      &kp K      &kp L      &kp SQT
            &kp Z      &kp X      &kp C      &kp V      &kp B          &kp N      &kp LARW   &kp DARW   &kp UARW   &kp RARW
                                             &kp TAB    &kp ESC        &kp ENTER  &kp SPACE
            >;
        };

        osumania_layer {
            bindings = <
            &kp TAB    &kp W      &kp E      &kp R      &kp T          &kp Y      &kp U      &kp I      &kp O      &kp P
            &kp ESC    &kp S      &kp D      &kp F      &kp G          &kp H      &kp J      &kp K      &kp L      &kp ENTER
            &kp Z      &kp X      &kp C      &kp V      &kp B          &kp N      &kp LARW   &kp DARW   &kp UARW   &kp RARW
                                             &kp D      &kp F          &kp J      &kp K
            >;
        };
    };
};
