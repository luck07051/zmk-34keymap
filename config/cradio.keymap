// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>

// Layer name
#define DEF 0
#define NUM 1
#define SYM 2
#define NAV 3
#define FUN 4
#define MOU 5
#define WML 6
#define OSU 7
#define OMN 8

#define OBS 9
#define ONU 10
#define OSY 11
#define OPA 12
#define OME 13

// Home row mods macro
#define LHRM(k1,k2,k3,k4) &mt LALT  k1  &mt LGUI  k2  &mt LCTRL k3  &mt LSHFT k4
#define RHRM(k1,k2,k3,k4) &mt RSHFT k1  &mt RCTRL k2  &mt RGUI  k3  &mt RALT  k4

// Bluetooth shorthand for alignments
#define BTSEL(index) &bt BT_SEL index
#define BTCLR        &bt BT_CLR
#define OUTUSB       &out OUT_USB
#define OUTBLE       &out OUT_BLE

// Combo macro for shorthand
#define COMBO(name, keycode, pos, layer, time) name { \
        bindings = <keycode>; \
        key-positions = <pos>; \
        layers = <layer>; \
        timeout-ms = <time>; \
    };

// Pair hold tap behavior macro for shorthand
#define PAIR_HT(name, label_name, macros_name) name: name { \
            compatible = "zmk,behavior-hold-tap"; \
            label = label_name; \
            #binding-cells = <2>; \
            flavor = "tap-preferred"; \
            tapping-term-ms = <200>; \
            bindings = <&macros_name>, <&kp>; \
        };

&mmv {
  acceleration-exponent = <1>;      // 1
  time-to-max-speed-ms = <1500>;    // 40
  delay-ms = <0>;                   // 0
};

&mwh {
  acceleration-exponent = <1>;      // 0
  time-to-max-speed-ms = <5000>;    // 40
  delay-ms = <0>;                   // 10
};

#define U_MOUSE_MOVE_MAX 1250       // 600
#define U_MOUSE_SCROLL_MAX 100      // 10

#undef MOVE_UP
#undef MOVE_DOWN
#undef MOVE_LEFT
#undef MOVE_RIGHT
#define MOVE_UP    MOVE_VERT(-U_MOUSE_MOVE_MAX)
#define MOVE_DOWN  MOVE_VERT(U_MOUSE_MOVE_MAX)
#define MOVE_LEFT  MOVE_HOR(-U_MOUSE_MOVE_MAX)
#define MOVE_RIGHT MOVE_HOR(U_MOUSE_MOVE_MAX)

#undef SCROLL_UP
#undef SCROLL_DOWN
#undef SCROLL_LEFT
#undef SCROLL_RIGHT
#define SCROLL_UP    SCROLL_VERT(U_MOUSE_SCROLL_MAX)
#define SCROLL_DOWN  SCROLL_VERT(-U_MOUSE_SCROLL_MAX)
#define SCROLL_LEFT  SCROLL_HOR(-U_MOUSE_SCROLL_MAX)
#define SCROLL_RIGHT SCROLL_HOR(U_MOUSE_SCROLL_MAX)

#define U_BTN1 &mkp MB1
#define U_BTN2 &mkp MB2
#define U_BTN3 &mkp MB3
#define U_MS_U &mmv MOVE_UP
#define U_MS_D &mmv MOVE_DOWN
#define U_MS_L &mmv MOVE_LEFT
#define U_MS_R &mmv MOVE_RIGHT
#define U_WH_U &mwh SCROLL_UP
#define U_WH_D &mwh SCROLL_DOWN
#define U_WH_L &mwh SCROLL_LEFT
#define U_WH_R &mwh SCROLL_RIGHT

&lt {
    //flavor = "tap-preferred";
    flavor = "balanced";
    tapping-term-ms = <200>;
};

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BACKSPACE>;
};

/ {
    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <170>;
            bindings = <&kp>, <&kp>;
        };

        mo_sl: behavior_mo_sl {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_sl";
            #binding-cells = <2>;
            // flavor = "hold-preferred";
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&sl>;
        };

        mo_to: behavior_mo_to {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_to";
            #binding-cells = <2>;
            // flavor = "hold-preferred";
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&to>;
        };

        mo_num: behavior_mo_num {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_num";
            #binding-cells = <2>;
            // flavor = "hold-preferred";
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&num_word>;
        };

        num_word: behavior_num_word {
            compatible = "zmk,behavior-caps-word";
            label = "NUM_WORD";
            #binding-cells = <0>;
            layers = <NUM>;                                // insert location of numbers layer here
            continue-list = <BACKSPACE DELETE DOT COMMA>;  // adjust as desired
            ignore-numbers;                                // numbers don't deactivate the layer
        };

        PAIR_HT(par_ht, "par_ht", par_pair)
        PAIR_HT(brc_ht, "brc_ht", brc_pair)
        PAIR_HT(bkt_ht, "bkt_ht", bkt_pair)
        PAIR_HT(lgt_ht, "lgt_ht", lgt_pair)
        PAIR_HT(sqt_ht, "sqt_ht", sqt_pair)
        PAIR_HT(dqt_ht, "dqt_ht", dqt_pair)

    };

    macros {
        ZMK_MACRO(par_pair, wait-ms = <0>; tap-ms = <0>; bindings = <&kp LPAR &kp RPAR>;)
        ZMK_MACRO(brc_pair, wait-ms = <0>; tap-ms = <0>; bindings = <&kp LBRC &kp RBRC>;)
        ZMK_MACRO(bkt_pair, wait-ms = <0>; tap-ms = <0>; bindings = <&kp LBKT &kp RBKT>;)
        ZMK_MACRO(lgt_pair, wait-ms = <0>; tap-ms = <0>; bindings = <&kp LT   &kp GT  >;)
        ZMK_MACRO(sqt_pair, wait-ms = <0>; tap-ms = <0>; bindings = <&kp SQT  &kp SQT >;)
        ZMK_MACRO(dqt_pair, wait-ms = <0>; tap-ms = <0>; bindings = <&kp DQT  &kp DQT >;)

        ZMK_MACRO(up_def,   wait-ms = <0>; tap-ms = <0>; bindings = <&kp UARW  &to DEF>;)
        ZMK_MACRO(down_def, wait-ms = <0>; tap-ms = <0>; bindings = <&kp DARW  &to DEF>;)
        ZMK_MACRO(lsg_def,  wait-ms = <0>; tap-ms = <0>; bindings = <&kp LS(G) &to DEF>;)
        ZMK_MACRO(sp_def,   wait-ms = <0>; tap-ms = <0>; bindings = <&kp SPACE &to DEF>;)
    };

    combos {
        compatible = "zmk,combos";

        COMBO(to_def,         &to DEF,               31 32,     DEF NUM,  50)
        COMBO(l_to_def,       &to DEF,               0 1 2 3,   OBS,  50)
        COMBO(r_to_def,       &to DEF,               6 7 8 9,   OBS,  50)
        COMBO(l_to_onehand,   &to OBS,               0 1 2 3,   DEF,  50)
        COMBO(r_to_onehand,   &to OBS,               6 7 8 9,   DEF,  50)

        // Top row combos: Q TAB @ #   ; : ~ ^
        COMBO(kpq,            &kp Q,                 1  2,      DEF NUM,  50)
        COMBO(tab,            &kp TAB,                  2  3,   DEF NUM,  50)
        COMBO(at_sign,        &kp AT_SIGN,           1     3,   DEF NUM,  50)
        COMBO(hash,           &kp HASH,              1  2  3,   DEF NUM,  50)

        COMBO(equal,          &kp EQUAL,             6  7,      DEF NUM,  50)
        COMBO(colon,          &kp COLON,                7  8,   DEF NUM,  50)
        COMBO(caret,          &kp CARET,             6     8,   DEF NUM,  50)
        COMBO(mouse_layer,    &tog MOU,              6  7  8,   DEF MOU,  50)

        // Home row combos: SYM ESC $   BS = + *
        COMBO(escape,         &kp ESCAPE,               12 13,  DEF NUM,  45)
        COMBO(dollar,         &kp DOLLAR,            11 12,     DEF NUM,  45)
        COMBO(caps_word,      &caps_word,            11    13,  DEF NUM,  50)
        COMBO(wm_layer,       &sl WML,               11 12 13,  DEF NUM,  50)

        COMBO(backspace,      &kp BACKSPACE,         16 17,     DEF NUM,  45)
        COMBO(minus,          &kp MINUS,                17 18,  DEF NUM,  50)
        COMBO(plus,           &kp PLUS,              16    18,  DEF NUM,  50)
        COMBO(astrk,          &kp ASTRK,             16 17 18,  DEF NUM,  50)
        COMBO(delete,         &kp DELETE,            15 16,     DEF NUM,  50)

        // Bottom row combos: Z / ? !   ' " & |
        COMBO(kpz,            &kp Z,                    22 23,  DEF NUM,  50)
        COMBO(semicolon,      &kp SEMICOLON,         21 22,     DEF NUM,  50)
        COMBO(question,       &kp QUESTION,          21    23,  DEF NUM,  50)
        COMBO(exclamation,    &kp EXCLAMATION,       21 22 23,  DEF NUM,  50)

        COMBO(sqt,            &kp SQT,               26 27,     DEF NUM,  50)
        COMBO(dqt,            &kp DQT,                  27 28,  DEF NUM,  50)
        COMBO(ampersand,      &kp AMPERSAND,         26    28,  DEF NUM,  50)
        COMBO(pipe,           &kp PIPE,              26 27 28,  DEF NUM,  50)

        // Thumb combos
        // COMBO(lbrc,           &kp LBRC,              31 12,     DEF NUM,  50)
        // COMBO(rbrc,           &kp RBRC,              31 13,     DEF NUM,  50)
        // COMBO(brc_pair,       &brc_pair,             31 12 13,  DEF NUM,  50)
        // COMBO(lt,             &kp LT,                31 22,     DEF NUM,  50)
        // COMBO(gt,             &kp GT,                31 23,     DEF NUM,  50)
        // COMBO(lgt_pair,       &lgt_pair,             31 22 23,  DEF NUM,  50)
        //
        // COMBO(lpar,           &kp LPAR,              32 16,     DEF NUM,  50)
        // COMBO(rpar,           &kp RPAR,              32 17,     DEF NUM,  50)
        // COMBO(par_pair,       &par_pair,             32 16 17,  DEF NUM,  50)
        // COMBO(lbkt,           &kp LBKT,              32 26,     DEF NUM,  50)
        // COMBO(rbkt,           &kp RBKT,              32 27,     DEF NUM,  50)
        // COMBO(bkt_pair,       &bkt_pair,             32 26 27,  DEF NUM,  50)
        //
        // // Thumb combos
        // COMBO(num1,           &kp N1,                6  16,     DEF NUM,  50)
        // COMBO(num2,           &kp N2,                7  17,     DEF NUM,  50)
        // COMBO(num3,           &kp N3,                8  18,     DEF NUM,  50)
        // COMBO(num4,           &kp N4,                17 27,     DEF NUM,  50)
        // COMBO(num5,           &kp N5,                16 26,     DEF NUM,  50)
        //
        // COMBO(num0,           &kp N0,                3  13,     DEF NUM,  50)
        // COMBO(num9,           &kp N9,                2  12,     DEF NUM,  50)
        // COMBO(num8,           &kp N8,                1  11,     DEF NUM,  50)
        // COMBO(num7,           &kp N7,                12 22,     DEF NUM,  50)
        // COMBO(num6,           &kp N6,                13 23,     DEF NUM,  50)

        // Vertical combos
        COMBO(lpar,           &kp LPAR,              6  16,     DEF NUM,  70)
        COMBO(rpar,           &kp RPAR,              7  17,     DEF NUM,  70)
        COMBO(lbkt,           &kp LBKT,              16 26,     DEF NUM,  70)
        COMBO(rbkt,           &kp RBKT,              17 27,     DEF NUM,  70)
        COMBO(lbrc,           &kp LBRC,              2  12,     DEF NUM,  70)
        COMBO(rbrc,           &kp RBRC,              3  13,     DEF NUM,  70)
        COMBO(lt,             &kp LT,                12 22,     DEF NUM,  70)
        COMBO(gt,             &kp GT,                13 23,     DEF NUM,  70)

        COMBO(osu2defualt,    &to DEF,               0 1 2 3,  OSU OMN,  50)
        COMBO(osu2mania,      &tog OMN,              6 7 8 9,  OSU OMN,  50)

        // Onehand combos [http://www.keyboard-layout-editor.com/#/gists/3949ff5171bbd401532929f5c0ae5fcd]
        COMBO(l_one_f,          &kp F,                       12 13,  OBS,  50)
        COMBO(l_one_g,          &kp G,                    11 12   ,  OBS,  50)
        COMBO(l_one_j,          &kp J,                 10 11      ,  OBS,  50)
        COMBO(l_one_y,          &kp Y,                    11    13,  OBS,  50)
        COMBO(l_one_v,          &kp V,                 10    12   ,  OBS,  50)
        COMBO(l_one_w,          &kp W,                 10       13,  OBS,  50)
        COMBO(l_one_d,          &kp D,                    11 12 13,  OBS,  50)
        COMBO(l_one_x,          &kp X,                 10 11 12   ,  OBS,  50)
        COMBO(l_one_q,          &kp Q,                 10 11    13,  OBS,  50)
        COMBO(l_one_z,          &kp Z,                 10 11 12 13,  OBS,  50)

        COMBO(l_one_c,          &kp C,                       22 23,  OBS,  50)
        COMBO(l_one_u,          &kp U,                    21 22   ,  OBS,  50)
        COMBO(l_one_n,          &kp N,                 20 21      ,  OBS,  50)
        COMBO(l_one_h,          &kp H,                    21    23,  OBS,  50)
        COMBO(l_one_k,          &kp K,                 20    22   ,  OBS,  50)
        COMBO(l_one_b,          &kp B,                 20       23,  OBS,  50)
        COMBO(l_one_l,          &kp L,                    21 22 23,  OBS,  50)
        COMBO(l_one_m,          &kp M,                 20 21 22   ,  OBS,  50)
        COMBO(l_one_p,          &kp P,                 20 21    23,  OBS,  50)
        COMBO(l_one_sp,         &kp SPACE,             20 21 22 23,  OBS,  50)

        COMBO(l_one_comma,      &kp COMMA,                   22 13,  OBS,  50)
        COMBO(l_one_dot,        &kp DOT,                  21    13,  OBS,  50)
        COMBO(l_one_fslh,       &kp FSLH,              20       13,  OBS,  50)
        COMBO(l_one_sqt,        &kp SQT,                  21 22 13,  OBS,  50)
        COMBO(l_one_esc,        &kp ESC,               20    12 13,  OBS,  50)
        COMBO(l_one_tab,        &kp TAB,               20 11 12 13,  OBS,  50)
        COMBO(l_one_bs,         &kp BACKSPACE,               12 23,  OBS,  50)
        COMBO(l_one_ctrl,       &sk LCTRL,             10       23,  OBS,  50)
        COMBO(l_one_gui,        &sk LGUI,              10    22   ,  OBS,  50)
        COMBO(l_one_alt,        &sk LALT,              10 21      ,  OBS,  50)

        COMBO(l_one_semicolon,  &kp SEMICOLON,         20 11      ,  OBS,  50)
        COMBO(l_one_colon,      &kp COLON,             20    12   ,  OBS,  50)
        COMBO(l_one_question,   &kp QUESTION,          20 11    13,  OBS,  50)
        COMBO(l_one_dqt,        &kp DQT,               20 21    13,  OBS,  50)
        COMBO(l_one_excl,       &kp EXCL,              11 21      ,  OBS,  50)
        COMBO(l_one_enter,      &kp ENTER,             13 23      ,  OBS,  50)
        COMBO(l_one_delete,     &kp DELETE,               21 12   ,  OBS,  50)
        COMBO(l_one_shift,      &sk LSHFT,             10 11 12 23,  OBS,  50)
        COMBO(l_one_caps_word,  &caps_word,            12 22      ,  OBS,  50)
        COMBO(l_one_caps_lock,  &kp CAPSLOCK,          20 21 22 13,  OBS,  50)

        COMBO(l_one_num_7,      &kp N7,                   11 12   ,  ONU,  50)
        COMBO(l_one_num_8,      &kp N8,                      12 13,  ONU,  50)
        COMBO(l_one_num_9,      &kp N9,                   11 12 13,  ONU,  50)
        COMBO(l_one_num_0,      &kp N0,                   21 22   ,  ONU,  50)
        COMBO(l_one_num_dot,    &kp DOT,                     22 23,  ONU,  50)

        COMBO(l_one_sym_at,     &kp AT,                10 11      ,  OSY,  50)
        COMBO(l_one_sym_bslh,   &kp BSLH,                 11 12   ,  OSY,  50)
        COMBO(l_one_sym_prcnt,  &kp PRCNT,             10 11 12   ,  OSY,  50)
        COMBO(l_one_sym_pipe,   &kp PIPE,              20 21      ,  OSY,  50)
        COMBO(l_one_sym_amps,   &kp AMPS,                 21 22   ,  OSY,  50)
        COMBO(l_one_sym_plus,   &kp PLUS,              20 21 22   ,  OSY,  50)

        COMBO(l_one_par_lt,     &kp LT,                10 11      ,  OPA,  50)
        COMBO(l_one_par_gt,     &kp GT,                   11 12   ,  OPA,  50)
        COMBO(l_one_par_grave,  &kp GRAVE,             10 11 12   ,  OPA,  50)
        COMBO(l_one_par_tilde,  &kp TILDE,             20 21      ,  OPA,  50)
        COMBO(l_one_par_caret,  &kp CARET,                21 22   ,  OPA,  50)
    };

    // conditional_layers {
    //     compatible = "zmk,conditional-layers";
    //     sym_layer {
    //         if-layers = <NUM NAV>;
    //         then-layer = <FUN>;
    //     };
    // };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
            &kp Q      &kp W      &kp F      &kp P      &kp B          &kp J      &kp L      &kp U      &kp Y      &kp COLON
            LHRM(A,        R,         S,         T)     &kp G          &kp M      RHRM(N,        E,         I,         O)
            &kp UNDER  &kp X      &kp C      &lt SYM D  &kp V          &kp K      &lt SYM H  &kp COMMA  &kp DOT    &kp FSLH
                                      &key_repeat  &lt NAV SPACE       &lt NUM ENTER    &trans
            >;
        };

        number_layer {
            bindings = <
            &trans     &kp MINUS  &kp PLUS   &kp EQUAL  &trans         &trans     &kp DARW   &kp UARW   &trans    &trans
            LHRM(N7,       N8,        N9,        N0)    &kp LS(G)      &trans     RHRM(N1,       N2,        N3,        N4)
            &kp PRCNT  &kp CARET  &kp ASTRK  &kp N6     &trans         &trans     &kp N5     &kp COMMA  &kp DOT   &kp FSLH
                                             &trans     &trans         &to DEF    &sl FUN
            >;
        };

        symbol_layer {
            bindings = <
            &trans     &kp LT     &kp GT     &kp EXCL   &trans         &kp TILDE  &kp LBRC   &kp RBRC   &trans     &trans
            &kp FSLH   &kp MINUS  &kp PLUS   &kp EQUAL  &trans         &kp GRAVE  &kp LPAR   &kp RPAR   &kp BSLH   &trans
            &kp PRCNT  &kp CARET  &kp ASTRK  &trans     &trans         &kp HASH   &kp LBKT   &kp RBKT   &kp AT     &trans
                                             &trans     &trans         &trans     &trans
            >;
        };

        navigation_layer {
            bindings = <
            &trans     &kp LC(LS(L)) &kp LC(LS(TAB)) &kp LC(TAB) &trans        &trans     &trans     &trans     &trans     &trans
            &sk LALT   &sk LGUI   &sk LCTRL  &sk LSHFT  &kp PSCRN       &kp LARW   &kp DARW   &kp UARW   &kp RARW   &kp ENTER
            &kp LC(A)  &kp K_CUT  &kp K_COPY &kp K_PASTE &trans         &kp HOME   &kp PG_DN  &kp PG_UP  &kp END    &trans
                                             &trans     &trans         &trans     &trans
            >;
        };

        function_layer {
            bindings = <
            &trans     &trans     OUTBLE     OUTUSB     BTCLR          BTSEL(0)   BTSEL(1)   BTSEL(2)   BTSEL(3)   BTSEL(4)
            &kp F7     &kp F8     &kp F9     &kp F10    &kp F12        &kp F11    &kp F1     &kp F2     &kp F3     &kp F4
            &to OSU    &trans     &trans     &kp F6     &trans         &trans     &kp F5     &trans     &trans     &trans
                                             &trans     &trans         &trans     &trans
            >;
        };

        mouse_layer {
            bindings = <
            &trans     &trans     &trans     &trans     &trans         &trans     &trans     U_MS_U   U_BTN2     &trans
            &trans     &trans     &trans     &trans     &trans         &trans     U_MS_L     U_MS_D   U_MS_R     U_BTN3
            &to OSU    &trans     &trans     &trans     &trans         &trans     U_WH_D     U_WH_U   &trans     &trans
                                             &trans     &trans         U_BTN1     &trans
            >;
        };

        window_manager_layer {
            bindings = <
            &trans     &trans     &trans     &trans     &trans         &trans     &trans     &trans     &trans     &trans
            &kp LG(N7) &kp LG(N8) &kp LG(N9) &kp LG(N0) &trans         &trans     &kp LG(N1) &kp LG(N2) &kp LG(N3) &kp LG(N4)
            &trans     &trans     &trans     &kp LG(N6) &trans         &trans     &kp LG(N5) &trans     &trans     &trans
                                             &trans     &trans         &trans     &trans
            >;
        };

        osu_layer {
            bindings = <
            &kp Q      &kp W      &kp E      &kp R      &kp T          &kp Y      &kp U      &kp I      &kp O      &kp P
            &kp A      &kp S      &kp D      &kp F      &kp G          &kp H      &kp J      &kp K      &kp L      &kp SQT
            &kp Z      &kp X      &kp C      &kp V      &kp B          &kp N      &kp LARW   &kp DARW   &kp UARW   &kp RARW
                                             &kp TAB    &kp ESC        &kp ENTER  &kp SPACE
            >;
        };

        osumania_layer {
            bindings = <
            &kp TAB    &kp W      &kp E      &kp R      &kp T          &kp Y      &kp U      &kp I      &kp O      &kp P
            &kp ESC    &kp S      &kp D      &kp F      &kp G          &kp H      &kp J      &kp K      &kp L      &kp ENTER
            &kp Z      &kp X      &kp C      &kp V      &kp B          &kp N      &kp LARW   &kp DARW   &kp UARW   &kp RARW
                                             &kp D      &kp F          &kp J      &kp K
            >;
        };


        one_base_layer {
            bindings = <
            &none      &none      &none      &none      &none          &none      &none      &none      &none      &none
            &lt OME O  &kp I      &kp E      &lt OPA N  &none          &none      &lt OPA N  &kp E      &kp I      &lt OME O
            &lt ONU A  &kp R      &kp S      &lt OSY T  &none          &none      &lt OSY T  &kp S      &kp R      &lt ONU A
                                             &none      &none          &none      &none
            >;
        };

        one_number_layer {
            bindings = <
            &none      &none      &none      &none      &none          &none      &none      &none      &none      &none
            &kp N0     &kp N4     &kp N5     &kp N6     &none          &none      &kp N6     &kp N5     &kp N4     &kp N0
            &none      &kp N1     &kp N2     &kp N3     &none          &none      &kp N3     &kp N2     &kp N1     &none
                                             &none      &none          &none      &none
            >;
        };

        one_symbol_layer {
            bindings = <
            &none      &none      &none      &none      &none          &none      &none      &none      &none      &none
            &kp AMPS   &kp ASTRK  &kp UNDER  &kp EXCL   &none          &none      &kp EXCL   &kp UNDER  &kp ASTRK  &kp AMPS
            &kp HASH   &kp EQUAL  &kp MINUS  &none      &none          &none      &none      &kp MINUS  &kp EQUAL  &kp HASH
                                             &none      &none          &none      &none
            >;
        };

        one_parenthsis_layer {
            bindings = <
            &none      &none      &none      &none      &none          &none      &none      &none      &none      &none
            &kp LBRC   &kp LPAR   &kp RPAR   &none      &none          &none      &none      &kp LPAR   &kp RPAR  &kp LBRC
            &kp RBRC   &kp LBKT   &kp RBKT   &none      &none          &none      &none      &kp LBKT   &kp RBKT  &kp RBRC
                                             &none      &none          &none      &none
            >;
        };

        one_media_layer {
            bindings = <
            &none      &none      &none      &none      &none          &none      &none      &none      &none      &none
            &none      &kp LPAR   &kp RPAR   &none      &none          &none      &none      &kp LPAR   &kp RPAR  &kp LBRC
            &kp LBRC   &kp LBKT   &kp RBKT   &none      &none          &none      &none      &kp LBKT   &kp RBKT  &kp RBRC
                                             &none      &none          &none      &none
            >;
        };
    };
};
