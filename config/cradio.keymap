// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Layer name
#define DEF 0
#define NUM 1
#define NAV 2


#define AS(keycode) &as LS(keycode) keycode

#define COMBO(name, keycode, pos) name { \
            timeout-ms = <30>; \
            key-positions = <pos>; \
            layers = <DEF NUM>; \
            bindings = <keycode>; \
        };
#define MODCOM(name, keycode, pos) name { \
            timeout-ms = <30>; \
            key-positions = <pos>; \
            layers = <DEF NUM>; \
            bindings = <keycode>; \
        };

&sk {
    release-after-ms = <1000>;
    //quick-release;
    //ignore-modifiers;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BACKSPACE>;
};


/ {
    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            //flavor = "tap-preferred";
            flavor = "balanced";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        // tap: sticky NUM | double-tap: to NUM
        td_num: tap_dance_num {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_NUM";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sl NUM>, <&to NUM>;
        };

        // tap: sticky NAV | double-tap: to NAV
        td_nav: tap_dance_nav {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_NAV";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sl NAV>, <&to NAV>;
        };
    };

    combos {
        compatible = "zmk,combos";

        COMBO(caps_wora,      &caps_word,        1 2 3)
        COMBO(escape,         &kp ESCAPE,        10 30)

        // # \t  ' "
        COMBO(hash,           &kp HASH,          1 2)
        COMBO(tab,            &kp TAB,           2 3)
        COMBO(single_quote,   &kp SINGLE_QUOTE,  6 7)
        COMBO(double_quotes,  &kp DOUBLE_QUOTES, 7 8)

        // , .  ` BS |
        COMBO(comma,          &kp COMMA,         11 12)
        COMBO(dot,            &kp DOT,           12 13)
        COMBO(grave,          &kp GRAVE,         15 16)
        COMBO(backspace,      &kp BACKSPACE,     16 17)
        COMBO(pipe,           &kp PIPE,          17 18)

        // ^ $  \ &
        COMBO(caret,          &kp CARET,         21 22)
        COMBO(dollar,         &kp DOLLAR,        22 23)
        COMBO(backslash,      &kp BACKSLASH,     26 27)
        COMBO(ampersand,      &kp AMPERSAND,     27 28)

        // Modifiers combos
        MODCOM(left_gui,      &sk LEFT_GUI,      10 11)
        MODCOM(right_gui,     &sk RIGHT_GUI,     18 19)
        MODCOM(left_control,  &sk LEFT_CONTROL,  11 13)
        MODCOM(right_control, &sk RIGHT_CONTROL, 16 18)
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
            &kp Q      &kp W      &kp F      &kp P      &kp B          &kp J      &kp L      &kp U      &kp Y      &kp MINUS
            &kp A      &kp R      &kp S      &kp T      &kp G          &kp M      &kp N      &kp E      &kp I      &kp O
            &kp Z      &kp X      &kp C      &kp D      &kp V          &kp K      &kp H      &kp LPAR   &kp RPAR   &kp UNDER
                                       &td_nav  &ht LSHFT SPACE      &ht RSHFT ENTER  &td_num
            >;
        };

        number_layer {
            bindings = <
            &kp EXCL   &kp SLASH  &kp LBRC   &kp RBRC   &kp ASTRK      &kp PRCNT  &kp LBKT   &kp RBKT   &kp PLUS   &kp MINUS
            &kp N7     &kp N8     &kp N9     &kp N0     &kp COLON      &kp QMARK  &kp N1     &kp N2     &kp N3     &kp N4
            &kp LT     &kp GT     &kp EQUAL  &kp N6     &kp SEMI       &kp AT     &kp N5     &kp LPAR   &kp RPAR   &kp TILDE
                                             &to DEF    &trans         &trans     &none
            >;
        };

        navigation_layer {
            bindings = <
            &trans     &trans     &trans     &trans     &trans         &kp HOME   &kp PG_DN  &kp PG_UP  &kp END   &trans
            &kp ESC    &sk LGUI   &sk LCTRL  &sk LALT   &kp BSPC       &kp LARW   &kp DARW   &kp UARW   &kp RARW  &trans
            &trans     &trans     &kp DEL    &sk LSHFT  &kp INS        &trans     &trans     &trans     &trans    &trans
                                             &none      &trans         &trans     &to DEF
            >;
        };
    };
};
