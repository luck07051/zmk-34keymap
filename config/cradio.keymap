// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Layer name
#define DEF 0
#define NUM 1
#define NAV 2
#define SYM 3
#define PUN 4
#define FUN 5
#define OSU 6

// Home row mods macro
#define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LCTRL k2  &ht LGUI k3  &ht LALT k4
#define HRMR(k1,k2,k3,k4) &ht RALT k1  &ht RGUI k2  &ht RCTRL k3  &ht RSHFT k4

// Shorthand for alignments
#define BTSEL(index) &bt BT_SEL index
#define BTCLR        &bt BT_CLR
#define OUTUSB       &out OUT_USB
#define OUTBLE       &out OUT_BLE

// Combo macro
#define COMBO(name, keycode, pos, layer, time) name { \
        bindings = <keycode>; \
        key-positions = <pos>; \
        layers = <layer>; \
        timeout-ms = <time>; \
    };

&sk {
    release-after-ms = <1000>;
};

&sl {
    release-after-ms = <1000>;
};

&lt {
    flavor = "tap-preferred";
    tapping-term-ms = <220>;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BACKSPACE>;
};


/ {
    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        // , '
        comsqt: comma_sqt {
            compatible = "zmk,behavior-mod-morph";
            label = "comma_sqt";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SINGLE_QUOTE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        // . "
        dotdqt: dot_dqt {
            compatible = "zmk,behavior-mod-morph";
            label = "dot_dqt";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp DOUBLE_QUOTES>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        // - _
        minund: minus_under {
            compatible = "zmk,behavior-mod-morph";
            label = "minus_under";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp UNDERSCORE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        // : ;
        colsmi: colon_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "colon_semi";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp SEMICOLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // Top row combos: Q /  $ :
        COMBO(slash,          &kp SLASH,          2 3,    DEF NUM NAV SYM,  50)
        COMBO(dollar,         &kp DOLLAR,         6 7,    DEF NUM NAV SYM,  50)
        // Top pinky buttons
        COMBO(def_left_top,   &kp Q,              1 2,    DEF,              50)
        COMBO(def_right_top,  &colsmi,            7 8,    DEF,              50)
        COMBO(sym_right_top,  &kp TILDE,          7 8,                SYM,  50)

        // Home row combos: SYM Esc  BS =
        COMBO(to_symbol,      &sl SYM,            11 12,  DEF,              50)
        COMBO(escape,         &kp ESCAPE,         12 13,  DEF NUM NAV SYM,  50)
        COMBO(backspace,      &kp BACKSPACE,      16 17,  DEF NUM NAV SYM,  50)
        COMBO(equal,          &kp EQUAL,          17 18,  DEF NUM NAV SYM,  50)

        // Lower row combos: & |  ( )
        COMBO(ampersand,      &kp AMPERSAND,      21 22,  DEF NUM NAV SYM,  50)
        COMBO(pipe,           &kp PIPE,           22 23,  DEF NUM NAV SYM,  50)
        COMBO(lpar,           &kp LPAR,           26 27,  DEF NUM NAV SYM,  50)
        COMBO(rpar,           &kp RPAR,           27 28,  DEF NUM NAV SYM,  50)
        //COMBO(lrpar,          &kp RPAR,           27 28,  DEF NUM NAV SYM,  50)


        COMBO(osu2defualt,    &to DEF,            30 33,  OSU,      50)
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
            &kp Q      &kp W      &kp F      &kp P      &kp B          &kp J      &kp L      &kp U      &kp Y      &colsmi
            HRML(A,    R,         S,         T)         &kp G          &kp M      HRMR(N,    E,         I,         O)
            &kp Z      &kp X      &kp C      &kp D      &kp V          &kp K      &kp H      &comsqt    &dotdqt    &minund
                                             &none      &lt NAV SPACE  &lt NUM ENTER  &none
            >;
        };

        number_layer {
            bindings = <
            &trans     &kp N7     &kp N8     &kp N9     &kp EQUAL      &trans     &kp PLUS   &kp MINUS  &kp EXCL   &trans
            &kp N0     &kp N4     &kp N5     &kp N6     &kp SLASH      &trans     &sk RALT   &sk RGUI   &sk RCTRL  &sk RSHFT
            &trans     &kp N1     &kp N2     &kp N3     &kp ASTRK      &trans     &kp LT     &kp GT     &kp DOT    &trans
                                             &trans     &kp SPACE      &none      &trans
            >;
        };

        navigation_layer {
            bindings = <
            &trans     &trans     &trans     &key_repeat &trans        &trans     &trans     &trans     &trans     &trans
            &sk LSHFT  &sk LCTRL  &sk LGUI   &sk LALT   &trans         &kp LARW   &kp DARW   &kp UARW   &kp RARW   &trans
            &trans     &trans     &trans     &trans     &trans         &kp HOME   &kp PG_DN  &kp PG_UP  &kp END    &trans
                                             &trans     &none          &trans     &trans
            >;
        };

        symbol_layer {
            bindings = <
            &trans     &trans     &trans     &trans     &trans         &kp HASH   &kp LBKT   &kp RBKT   &kp AT     &kp TILDE
            &trans     &none      &none      &kp GRAVE  &trans         &kp BSLH   &kp LBRC   &kp RBRC   &kp ASTRK  &kp PLUS
            &trans     &trans     &trans     &trans     &trans         &kp PRCNT  &kp LT     &kp GT     &kp EXCL   &kp QMARK
                                             &trans     &trans         &kp CARET  &trans
            >;
        };

        function_layer {
            bindings = <
            //&trans     &trans     OUTBLE     OUTUSB     BTCLR          BTSEL(0)   BTSEL(1)   BTSEL(2)   BTSEL(3)   BTSEL(4)
            &trans     &kp F7     &kp F8     &kp F9     &trans         &trans     &trans     &trans     &trans     &trans
            &kp F10    &kp F4     &kp F5     &kp F6     &trans         &trans     &sk RALT   &sk RGUI   &sk RCTRL  &sk RSHFT
            &trans     &kp F1     &kp F2     &kp F3     &trans         &trans     &trans     &trans     &trans     &trans
                                             &trans     &trans         &trans     &trans
            >;
        };

        osu_layer {
            bindings = <
            &kp Q      &kp W      &kp E      &kp R      &kp T          &kp Y      &kp U      &kp I      &kp O      &kp P
            &kp A      &kp S      &kp D      &kp F      &kp G          &kp H      &kp J      &kp K      &kp L      &kp SQT
            &kp Z      &kp X      &kp C      &kp V      &kp B          &kp N      &kp LARW   &kp DARW   &kp UARW   &kp RARW
                                             &kp TAB    &kp ESC        &kp ENTER  &kp SPACE
            >;
        };
    };
};
